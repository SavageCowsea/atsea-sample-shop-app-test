{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-05T21:11:45.928Z",
    "end": "2021-12-05T21:11:46.721Z",
    "duration": 793,
    "testsRegistered": 23,
    "passPercent": 91.30434782608695,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "903219fe-be43-47ee-95df-0b8cc13b4148",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "A costumer must be show",
          "fullTitle": "A costumer must be show",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const response = await get(\n  \"http://localhost:8080/api/customer/username=\" + customerName\n)\n  .set(\"User-Agent\", \"agent\") /// borrar maybe(?)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property(\"name\");\nexpect(response.body.name).to.equal(customerName);",
          "err": {},
          "uuid": "814a3cb7-a564-4a42-8df8-7eaf63930010",
          "parentUUID": "903219fe-be43-47ee-95df-0b8cc13b4148",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "The correct costumer should be update",
          "fullTitle": "The correct costumer should be update",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const customer = {\n  customerId: customerTestId,\n  name: \"Sally Vallery\",\n  address: \"Arcane street\",\n  email: \"jinxed@XD.com\",\n  phone: \"32467991632\",\n  username: \"definitelynotjinx\",\n  password: \"wtfjinx\",\n  enabled: \"true\",\n  role: \"USER\",\n};\nconst response = await put(\n  \"http://localhost:8080/api/customer/\" + customerTestId\n)\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\")\n  .send(customer);\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property(\"customerId\");\nexpect(response.body.address).to.equal(customer.address);\nexpect(response.body.address).to.equal(customer.email);\nexpect(response.body.phone).to.equal(customer.phone);\nexpect(response.body.address).to.equal(customer.username);\nexpect(response.body.password).to.equal(customer.password);",
          "err": {},
          "uuid": "3e797976-459a-4921-8a15-b96bf6b21cee",
          "parentUUID": "903219fe-be43-47ee-95df-0b8cc13b4148",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
          "title": "Customer tests",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/customer.test.js",
          "file": "/test/api/customer.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Customer tests Create customer",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .post(\"http://localhost:8080/api/customer/\")\n  .send({\n    customerId: 1,\n    name: \"Sally Vallery\",\n    address: \"144 Townsend, San Francisco 99999\",\n    email: \"sally@example.com\",\n    phone: \"513 222 5555\",\n    username: \"sallyv\",\n    password: \"sallypassword\",\n    enabled: \"true\",\n    role: \"USER\",\n  })\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.CREATED);\nexpect(response.body).to.have.property(\"customerId\");\ncustomerTestId = response.body.customerId; ///User Id\ncustomerName = response.body.name; ///User Name",
              "err": {},
              "uuid": "e37758aa-95b9-4592-87b2-1a254ccc4b5f",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get customer by Id",
              "fullTitle": "Customer tests Get customer by Id",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = customerTestId;\nconst response = await get(\"http://localhost:8080/api/customer/\" + id)\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property(\"customerIf\"); //this is misspelled in the API\nexpect(response.body).to.have.property(\"name\");\nexpect(response.body).to.have.property(\"username\");",
              "err": {},
              "uuid": "5b9eef18-b9c4-4dd2-91bf-d92ad630d015",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get customer by name",
              "fullTitle": "Customer tests Get customer by name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(\"A costumer must be show\", async () => {\n  const response = await get(\n    \"http://localhost:8080/api/customer/username=\" + customerName\n  )\n    .set(\"User-Agent\", \"agent\") /// borrar maybe(?)\n    .set(\"Content-Type\", \"application/json\")\n    .set(\"Accept\", \"application/json\");\n  expect(response.status).to.equal(StatusCodes.OK);\n  expect(response.body).to.have.property(\"name\");\n  expect(response.body.name).to.equal(customerName);\n});",
              "err": {},
              "uuid": "f1fbd7cb-c691-4b75-a5e5-6421f2aed4f9",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get Customer by Username",
              "fullTitle": "Customer tests Get Customer by Username",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const username = \"sallyv\"; /////Username\nconst response = await get(\n  \"http://localhost:8080/api/customer/username=\" + username\n)\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property(\"username\");\nexpect(response.body).to.have.property(\"customerIf\");",
              "err": {},
              "uuid": "de8bdabd-9dd2-4ba2-a9b0-dbbde00f3a34",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update customer",
              "fullTitle": "Customer tests Update customer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(\"The correct costumer should be update\", async () => {\n  const customer = {\n    customerId: customerTestId,\n    name: \"Sally Vallery\",\n    address: \"Arcane street\",\n    email: \"jinxed@XD.com\",\n    phone: \"32467991632\",\n    username: \"definitelynotjinx\",\n    password: \"wtfjinx\",\n    enabled: \"true\",\n    role: \"USER\",\n  };\n  const response = await put(\n    \"http://localhost:8080/api/customer/\" + customerTestId\n  )\n    .set(\"Content-type\", \"application/json\")\n    .set(\"Accept\", \"application/json\")\n    .send(customer);\n  expect(response.status).to.equal(StatusCodes.OK);\n  expect(response.body).to.have.property(\"customerId\");\n  expect(response.body.address).to.equal(customer.address);\n  expect(response.body.address).to.equal(customer.email);\n  expect(response.body.phone).to.equal(customer.phone);\n  expect(response.body.address).to.equal(customer.username);\n  expect(response.body.password).to.equal(customer.password);\n});",
              "err": {},
              "uuid": "22cfa609-2bfd-4cb1-bcf7-95bed6368c5d",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete customer by Id",
              "fullTitle": "Customer tests Delete customer by Id",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = customerTestId; // Deberiamos cambiar esto\nconst response = await ajax\n  .del(\"http://localhost:8080/api/customer/\" + id) ///Por que no sirve del (?)\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.NO_CONTENT);",
              "err": {},
              "uuid": "5de8a315-7151-4834-9fec-bc0a73c5e879",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all customers in system",
              "fullTitle": "Customer tests Delete all customers in system",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .del(`http://localhost:8080/api/customer/`)\n  .set(\"User-Agent\", \"agent\")\n  .set(\"Content-Type\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.NO_CONTENT);",
              "err": {},
              "uuid": "43bb6493-5c90-4123-be2d-4a1d6dca1d12",
              "parentUUID": "36d0aa2b-2933-4b2b-9837-4331c74fd99c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e37758aa-95b9-4592-87b2-1a254ccc4b5f",
            "5b9eef18-b9c4-4dd2-91bf-d92ad630d015",
            "f1fbd7cb-c691-4b75-a5e5-6421f2aed4f9",
            "de8bdabd-9dd2-4ba2-a9b0-dbbde00f3a34",
            "22cfa609-2bfd-4cb1-bcf7-95bed6368c5d",
            "5de8a315-7151-4834-9fec-bc0a73c5e879",
            "43bb6493-5c90-4123-be2d-4a1d6dca1d12"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 145,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c2568294-b6d3-486e-9513-23eab3919a7f",
          "title": "First Api Tests",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/example.test.js",
          "file": "/test/api/example.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Consume GET Service",
              "fullTitle": "First Api Tests Consume GET Service",
              "timedOut": false,
              "duration": 379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await get('http://httpbin.org/ip');\n      \nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property('origin');",
              "err": {},
              "uuid": "eba6cf63-0fab-417f-a128-4b75af55fbfc",
              "parentUUID": "c2568294-b6d3-486e-9513-23eab3919a7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eba6cf63-0fab-417f-a128-4b75af55fbfc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 379,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "85b39d46-0663-470c-a922-794dbd6d9cbf",
          "title": "Login And Purchase",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/loginAndPurchase.test.js",
          "file": "/test/api/loginAndPurchase.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create customer",
              "fullTitle": "Login And Purchase Create customer",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .post(\"http://localhost:8080/api/customer/\")\n  .send({\n    customerId: 1,\n    name: \"Sally Vallery\",\n    address: \"144 Townsend, San Francisco 99999\",\n    email: \"sally@example.com\",\n    phone: \"513 222 5555\",\n    username: \"sallyv\",\n    password: \"sallypassword\",\n    enabled: \"true\",\n    role: \"USER\",\n  })\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.CREATED);\nexpect(response.body).to.have.property(\"customerId\");\ncustomerTestId = response.body.customerId; ///User Id\ncustomerName = response.body.name; ///User Name",
              "err": {},
              "uuid": "72171e83-9272-4090-82b9-486f6d48b09b",
              "parentUUID": "85b39d46-0663-470c-a922-794dbd6d9cbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login",
              "fullTitle": "Login And Purchase Login",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .post(`http://localhost:8080/login/`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"Accept\", \"application/json\")\n  .send({\n    username: \"sallyv\",\n    password: \"sallypassword\",\n  });\ntoken = response.body.token;\nconsole.log(token);\nexpect(response.status).to.equal(StatusCodes.OK);",
              "err": {},
              "uuid": "a3d58b01-b4cb-4177-ad3f-c6f94edc3ee4",
              "parentUUID": "85b39d46-0663-470c-a922-794dbd6d9cbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Purchase",
              "fullTitle": "Login And Purchase Purchase",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .get(\"http://localhost:8080/purchase/\")\n  .set(\"Content-type\", \"application/json\")\n  .set(\"Accept\", \"application/json\")\n  .set(\"Authorization\", `Bearer ${token}`);\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property(\"message\");",
              "err": {},
              "uuid": "5a091b6a-6bb7-4a56-be55-306e73f845a4",
              "parentUUID": "85b39d46-0663-470c-a922-794dbd6d9cbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete all customers in system",
              "fullTitle": "Login And Purchase Delete all customers in system",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax\n  .del(`http://localhost:8080/api/customer/`)\n  .set(\"User-Agent\", \"agent\")\n  .set(\"Content-Type\", \"application/json\");\nexpect(response.status).to.equal(StatusCodes.NO_CONTENT);",
              "err": {},
              "uuid": "94f88ffe-d370-4b4d-aa3b-0b391621326f",
              "parentUUID": "85b39d46-0663-470c-a922-794dbd6d9cbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72171e83-9272-4090-82b9-486f6d48b09b",
            "a3d58b01-b4cb-4177-ad3f-c6f94edc3ee4",
            "5a091b6a-6bb7-4a56-be55-306e73f845a4",
            "94f88ffe-d370-4b4d-aa3b-0b391621326f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
          "title": "Order Tests",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/order.test.js",
          "file": "/test/api/order.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create an order",
              "fullTitle": "Order Tests Create an order",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax.post('http://localhost:8080/api/order/')\n    .send({\n        \"orderId\": 1,\n        \"orderDate\": \"2017-02-28T19:52:39Z\",\n        \"customerId\": \"54321\",\n        \"productsOrdered\": { \"1\": 1, \"2\": 1, \"3\": 1 }\n    })\n    .set('Content-type', 'application/json')\n    .set('Accept', 'application/json');\nexpect(response.status).to.equal(StatusCodes.CREATED);\nexpect(response.body).to.have.property('orderId');\norderTestId = response.body.orderId;",
              "err": {},
              "uuid": "d5577010-d9d0-4111-b1db-606be04e9446",
              "parentUUID": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get all orders",
              "fullTitle": "Order Tests Get all orders",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Aquí va el test",
              "err": {},
              "uuid": "840c25ef-c956-4d5c-b6ba-1c191411b156",
              "parentUUID": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get order by Id",
              "fullTitle": "Order Tests Get order by Id",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = orderTestId;\nconst response = await ajax.get('http://localhost:8080/api/order/'+id)\n    .set('Content-type', 'application/json')\n    .set('Accept', 'application/json');\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property('orderId');\nexpect(response.body).to.have.property('customerId');\nexpect(response.body).to.have.property('productsOrdered');",
              "err": {},
              "uuid": "9e592f2e-bbbd-457a-acd8-804fccb46b2c",
              "parentUUID": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update an order",
              "fullTitle": "Order Tests Update an order",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Aquí va el test",
              "err": {},
              "uuid": "518f9678-2036-4025-a121-5b53c454a1ee",
              "parentUUID": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete order by Id",
              "fullTitle": "Order Tests Delete order by Id",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = orderTestId;\nconst response = await ajax.delete('http://localhost:8080/api/order/'+id)\n    .set('Content-type', 'application/json')\n    .set('Accept', 'application/json');\nexpect(response.status).to.equal(StatusCodes.NO_CONTENT);",
              "err": {},
              "uuid": "9b729742-b82a-47f6-81f5-70e4a8740ddd",
              "parentUUID": "531a2f5b-c3cf-436f-b9f9-a716c000afdb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5577010-d9d0-4111-b1db-606be04e9446",
            "840c25ef-c956-4d5c-b6ba-1c191411b156",
            "9e592f2e-bbbd-457a-acd8-804fccb46b2c",
            "518f9678-2036-4025-a121-5b53c454a1ee",
            "9b729742-b82a-47f6-81f5-70e4a8740ddd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 75,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8c7d06d6-1125-4c00-b14e-7fdb996f07f7",
          "title": "Products",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/products.test.js",
          "file": "/test/api/products.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Getting all products",
              "fullTitle": "Products Getting all products",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await ajax.get('http://localhost:8080/api/product/')\n    .set('Content-type','application/json')\n    .set('Accept','application/json');\nexpect(response.status).to.equal(StatusCodes.OK);",
              "err": {},
              "uuid": "a328fdae-aec8-49c4-adb1-8b32c4473d9e",
              "parentUUID": "8c7d06d6-1125-4c00-b14e-7fdb996f07f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting single product by ID",
              "fullTitle": "Products Getting single product by ID",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await ajax.get('http://localhost:8080/api/product/'+id)\n    .set('Content-type','application/json')\n    .set('Accept','application/json');\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property('description');\nexpect(response.body).to.have.property('name');\nexpect(response.body).to.have.property('productId');",
              "err": {},
              "uuid": "cd499b0c-44ac-40e2-8e81-9da747cfd2a0",
              "parentUUID": "8c7d06d6-1125-4c00-b14e-7fdb996f07f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a328fdae-aec8-49c4-adb1-8b32c4473d9e",
            "cd499b0c-44ac-40e2-8e81-9da747cfd2a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "339384a2-57a6-402e-97b2-1ea0c2f4695a",
          "title": "System utilities Tests",
          "fullFile": "/mnt/c/Users/Usuario/Desktop/Proyecto final team/atsea-sample-shop-app-automation-main/test/api/systemUtilities.test.js",
          "file": "/test/api/systemUtilities.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Database healtcheck",
              "fullTitle": "System utilities Tests Database healtcheck",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Aquí va la prueba",
              "err": {},
              "uuid": "904415fd-e362-4993-b0d3-31b11ebc187b",
              "parentUUID": "339384a2-57a6-402e-97b2-1ea0c2f4695a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Getting container ID using GET",
              "fullTitle": "System utilities Tests Getting container ID using GET",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await get('http://localhost:8080//utility/containerid/')\n    .set('Content-type','application/json')\n    .set('Accept','application/json');\nexpect(response.status).to.equal(StatusCodes.OK);\nexpect(response.body).to.have.property('host');\nexpect(response.body).to.have.property('ip');",
              "err": {},
              "uuid": "46e8a9c0-4625-4d1e-bdbf-846c90972c5c",
              "parentUUID": "339384a2-57a6-402e-97b2-1ea0c2f4695a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "904415fd-e362-4993-b0d3-31b11ebc187b",
            "46e8a9c0-4625-4d1e-bdbf-846c90972c5c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "814a3cb7-a564-4a42-8df8-7eaf63930010",
        "3e797976-459a-4921-8a15-b96bf6b21cee"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}